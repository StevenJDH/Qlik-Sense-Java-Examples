/**
 * This file is part of Qlik Sense Java Examples <https://github.com/StevenJDH/Qlik-Sense-Java-Examples>.
 * Copyright (C) 2019-2020 Steven Jenkins De Haro.
 *
 * Qlik Sense Java Examples is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Qlik Sense Java Examples is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Qlik Sense Java Examples.  If not, see <http://www.gnu.org/licenses/>.
 */

package TicketAPI;

import Shared.QlikAuthCertificate;
import java.io.File;
import java.io.IOException;
import java.nio.file.Paths;
import java.security.KeyManagementException;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.UnrecoverableKeyException;
import java.security.cert.CertificateException;
import java.util.Arrays;
import java.util.Optional;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 * TicketRequestDemo.java (UTF-8)
 * A GUI demo that can request tickets using certificates exported from Qlik Sense.
 * 
 * @version 1.2
 * @author Steven Jenkins De Haro
 */
public class TicketRequestDemo extends javax.swing.JFrame {

    private static final String DEFAULT_CERT_DIRECTORY = Paths.get(System.getenv("programdata"), 
                "Qlik", "Sense", "Repository", "Exported Certificates").toString();
    private ScheduledExecutorService executorService;
    private static int expireCountdown = 60;
    
    /**
     * Creates new form TicketRequestDemo
     */
    public TicketRequestDemo() {
        initComponents();
        executorService = null;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtUserId = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtDirectory = new javax.swing.JTextField();
        txtRootCertPath = new javax.swing.JTextField();
        lblTicket = new javax.swing.JLabel();
        btnRootBrowse = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtTicket = new javax.swing.JTextArea();
        txtHostname = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtClientCertPath = new javax.swing.JTextField();
        txtVirtualProxy = new javax.swing.JTextField();
        btnClientBrowse = new javax.swing.JButton();
        btnRequest = new javax.swing.JButton();
        txtClientPassword = new javax.swing.JPasswordField();
        jLabel3 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Ticket Request Demo");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        txtUserId.setText("administrator");

        jLabel8.setText("Server CA Certificate (*.cer):");

        txtDirectory.setText("domain");

        lblTicket.setText("Ticket:");

        btnRootBrowse.setText("...");
        btnRootBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRootBrowseActionPerformed(evt);
            }
        });

        txtTicket.setEditable(false);
        txtTicket.setBackground(new java.awt.Color(0, 0, 0));
        txtTicket.setColumns(20);
        txtTicket.setForeground(new java.awt.Color(51, 204, 0));
        txtTicket.setRows(5);
        jScrollPane1.setViewportView(txtTicket);

        txtHostname.setText("qlikserver1.domain.local");

        jLabel1.setText("Hostname:");

        jLabel6.setText("Client Certificate (*.pfx):");

        jLabel2.setText("Virtual Proxy Prefix (Optional):");

        btnClientBrowse.setText("...");
        btnClientBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClientBrowseActionPerformed(evt);
            }
        });

        btnRequest.setText("Request");
        btnRequest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRequestActionPerformed(evt);
            }
        });

        jLabel3.setText("User Id:");

        jLabel7.setText("Password:");

        jLabel4.setText("User Directory:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtClientPassword)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(txtClientCertPath)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnClientBrowse, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtRootCertPath))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnRootBrowse, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblTicket, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtHostname)
                            .addComponent(txtDirectory)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtVirtualProxy)
                            .addComponent(txtUserId)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnRequest, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(116, 116, 116))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtClientCertPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnClientBrowse))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel7)
                .addGap(7, 7, 7)
                .addComponent(txtClientPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtRootCertPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnRootBrowse))
                .addGap(45, 45, 45)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtVirtualProxy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtHostname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtUserId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtDirectory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblTicket)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnRequest)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnRootBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRootBrowseActionPerformed
        JFileChooser fc = new JFileChooser(DEFAULT_CERT_DIRECTORY);
        fc.setDialogTitle("Open server CA certificate");
        fc.setSelectedFile(new File("root.cer"));
        fc.setFileFilter(new FileNameExtensionFilter("X.509 certificate file (*.cer)", "cer"));

        if(fc.showOpenDialog(this) == JOptionPane.OK_OPTION)
        {
            txtRootCertPath.setText(fc.getSelectedFile().getPath());
        }
    }//GEN-LAST:event_btnRootBrowseActionPerformed

    private void btnClientBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClientBrowseActionPerformed
        JFileChooser fc = new JFileChooser(DEFAULT_CERT_DIRECTORY);
        fc.setDialogTitle("Open client certificate");
        fc.setSelectedFile(new File("client.pfx"));
        fc.setFileFilter(new FileNameExtensionFilter("PKCS#12 certificate file (*.pfx)", "pfx"));

        if(fc.showOpenDialog(this) == JOptionPane.OK_OPTION)
        {
            txtClientCertPath.setText(fc.getSelectedFile().getPath());
        }
    }//GEN-LAST:event_btnClientBrowseActionPerformed

    private void btnRequestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRequestActionPerformed
        char[] clientPass = txtClientPassword.getPassword();
        var cert = new QlikAuthCertificate(txtClientCertPath.getText(), clientPass,
                txtRootCertPath.getText());
        var request = new TicketRequest(txtHostname.getText(),
            txtVirtualProxy.getText().trim().equals("") ?
                    Optional.empty() :
                    Optional.of(txtVirtualProxy.getText().trim()),
            cert);
        
        // Avoids requesting a new ticket while there is one that is not expired.
        if (null != executorService && !executorService.isTerminated()) {
            return;
        }
        
        try {
            // String json = request.getTicket(txtDirectory.getText(), txtUserId.getText());
            String json = request.getTicketAsync(txtDirectory.getText(), txtUserId.getText())
                    .get(); // Non-blocking request that waits for server's response.
            
            // Lazy way to parse JSON, use regex or proper deserialization instead.
            if (json.contains("Ticket")) {
                int start = json.indexOf("Ticket\":\"");
                int end = json.substring(start).indexOf("\",");
                txtTicket.setText(json.substring(start + 9, start + end));
                displayTicketExpiration();
            } else  {
                lblTicket.setText("Ticket:");
                txtTicket.setText("Unable to request ticket.");
            }
        } catch (KeyStoreException | IOException | CertificateException |
            NoSuchAlgorithmException | UnrecoverableKeyException |
            KeyManagementException | InterruptedException | ExecutionException ex) {

            lblTicket.setText("Ticket:");
            // Display any errors while cleaning up empty or obscure error messages.
            txtTicket.setText(ex.getMessage().equals("") || 
                    ex.getMessage().contains("(The specified procedure could not be found)") ?
                "An error occured while processing the ticket request." :
                ex.getMessage());
        }
        
        // Zeros out the password while avoiding the Java String Pool for security.
        Arrays.fill(clientPass, '0');
    }//GEN-LAST:event_btnRequestActionPerformed
    
    private void displayTicketExpiration() {
        executorService = Executors.newSingleThreadScheduledExecutor();
        executorService.scheduleWithFixedDelay(()-> {
            if (0 == --expireCountdown) {
                expireCountdown = 60;
                lblTicket.setText("Ticket expired:");
                executorService.shutdown();
            } else {
                lblTicket.setText(String.format("Ticket expires in %d seconds:", expireCountdown));
            }
        }, 0, 1000L, TimeUnit.MILLISECONDS);
    }
    
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        txtClientCertPath.setEditable(false);
        txtRootCertPath.setEditable(false);
    }//GEN-LAST:event_formWindowOpened

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TicketRequestDemo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TicketRequestDemo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TicketRequestDemo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TicketRequestDemo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new TicketRequestDemo().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClientBrowse;
    private javax.swing.JButton btnRequest;
    private javax.swing.JButton btnRootBrowse;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lblTicket;
    private javax.swing.JTextField txtClientCertPath;
    private javax.swing.JPasswordField txtClientPassword;
    private javax.swing.JTextField txtDirectory;
    private javax.swing.JTextField txtHostname;
    private javax.swing.JTextField txtRootCertPath;
    private javax.swing.JTextArea txtTicket;
    private javax.swing.JTextField txtUserId;
    private javax.swing.JTextField txtVirtualProxy;
    // End of variables declaration//GEN-END:variables
}
